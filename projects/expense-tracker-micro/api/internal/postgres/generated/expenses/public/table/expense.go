//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Expense = newExpenseTable("public", "expense", "")

type expenseTable struct {
	postgres.Table

	// Columns
	ID        postgres.ColumnInteger
	UserID    postgres.ColumnInteger
	Amount    postgres.ColumnInteger
	Category  postgres.ColumnString
	CreatedAt postgres.ColumnTimestampz
	UpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ExpenseTable struct {
	expenseTable

	EXCLUDED expenseTable
}

// AS creates new ExpenseTable with assigned alias
func (a ExpenseTable) AS(alias string) *ExpenseTable {
	return newExpenseTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExpenseTable with assigned schema name
func (a ExpenseTable) FromSchema(schemaName string) *ExpenseTable {
	return newExpenseTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ExpenseTable with assigned table prefix
func (a ExpenseTable) WithPrefix(prefix string) *ExpenseTable {
	return newExpenseTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ExpenseTable with assigned table suffix
func (a ExpenseTable) WithSuffix(suffix string) *ExpenseTable {
	return newExpenseTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newExpenseTable(schemaName, tableName, alias string) *ExpenseTable {
	return &ExpenseTable{
		expenseTable: newExpenseTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newExpenseTableImpl("", "excluded", ""),
	}
}

func newExpenseTableImpl(schemaName, tableName, alias string) expenseTable {
	var (
		IDColumn        = postgres.IntegerColumn("id")
		UserIDColumn    = postgres.IntegerColumn("user_id")
		AmountColumn    = postgres.IntegerColumn("amount")
		CategoryColumn  = postgres.StringColumn("category")
		CreatedAtColumn = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		allColumns      = postgres.ColumnList{IDColumn, UserIDColumn, AmountColumn, CategoryColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns  = postgres.ColumnList{UserIDColumn, AmountColumn, CategoryColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return expenseTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:        IDColumn,
		UserID:    UserIDColumn,
		Amount:    AmountColumn,
		Category:  CategoryColumn,
		CreatedAt: CreatedAtColumn,
		UpdatedAt: UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}

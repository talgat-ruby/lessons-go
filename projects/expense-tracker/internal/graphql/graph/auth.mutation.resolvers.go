package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.63

import (
	"context"
	"log/slog"

	"github.com/talgat-ruby/lessons-go/projects/expense-tracker/internal/graphql/graph/model"
	"github.com/talgat-ruby/lessons-go/projects/expense-tracker/internal/graphql/graph/request"
)

// SignIn is the resolver for the signIn field.
func (r *mutationResolver) SignIn(ctx context.Context, email string, password string) (*model.SignInResp, error) {
	log := r.logger.With("method", "SignIn")

	// request parse
	reqBody := request.NewCtrlSignInRequest(email, password)

	ctrlResp, err := r.ctrl.SignIn(ctx, reqBody)
	if err != nil || ctrlResp == nil {
		log.ErrorContext(ctx, "fail", slog.Any("error", err))
		return nil, err
	}

	log.InfoContext(
		ctx,
		"success sign in user",
		slog.String("email", reqBody.GetEmail()),
	)
	return &model.SignInResp{
		Token: ctrlResp.GetToken(),
	}, nil
}

// SignUp is the resolver for the signUp field.
func (r *mutationResolver) SignUp(ctx context.Context, email string, password string) (*model.SignUpResp, error) {
	log := r.logger.With("method", "SignUp")

	// request parse
	reqBody := request.NewCtrlSignUpRequest(email, password)

	ctrlResp, err := r.ctrl.SignUp(ctx, reqBody)
	if err != nil || ctrlResp == nil {
		log.ErrorContext(ctx, "fail", slog.Any("error", err))
		return nil, err
	}

	log.InfoContext(
		ctx,
		"success sign up user",
		slog.String("email", reqBody.GetEmail()),
	)
	return &model.SignUpResp{
		Token: ctrlResp.GetToken(),
	}, nil
}

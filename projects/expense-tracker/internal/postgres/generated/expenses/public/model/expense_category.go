//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package model

import "errors"

type ExpenseCategory string

const (
	ExpenseCategory_Other       ExpenseCategory = "Other"
	ExpenseCategory_Groceries   ExpenseCategory = "Groceries"
	ExpenseCategory_Leisure     ExpenseCategory = "Leisure"
	ExpenseCategory_Electronics ExpenseCategory = "Electronics"
	ExpenseCategory_Utilities   ExpenseCategory = "Utilities"
	ExpenseCategory_Clothing    ExpenseCategory = "Clothing"
	ExpenseCategory_Health      ExpenseCategory = "Health"
)

var ExpenseCategoryAllValues = []ExpenseCategory{
	ExpenseCategory_Other,
	ExpenseCategory_Groceries,
	ExpenseCategory_Leisure,
	ExpenseCategory_Electronics,
	ExpenseCategory_Utilities,
	ExpenseCategory_Clothing,
	ExpenseCategory_Health,
}

func (e *ExpenseCategory) Scan(value interface{}) error {
	var enumValue string
	switch val := value.(type) {
	case string:
		enumValue = val
	case []byte:
		enumValue = string(val)
	default:
		return errors.New("jet: Invalid scan value for AllTypesEnum enum. Enum value has to be of type string or []byte")
	}

	switch enumValue {
	case "Other":
		*e = ExpenseCategory_Other
	case "Groceries":
		*e = ExpenseCategory_Groceries
	case "Leisure":
		*e = ExpenseCategory_Leisure
	case "Electronics":
		*e = ExpenseCategory_Electronics
	case "Utilities":
		*e = ExpenseCategory_Utilities
	case "Clothing":
		*e = ExpenseCategory_Clothing
	case "Health":
		*e = ExpenseCategory_Health
	default:
		return errors.New("jet: Invalid scan value '" + enumValue + "' for ExpenseCategory enum")
	}

	return nil
}

func (e ExpenseCategory) String() string {
	return string(e)
}
